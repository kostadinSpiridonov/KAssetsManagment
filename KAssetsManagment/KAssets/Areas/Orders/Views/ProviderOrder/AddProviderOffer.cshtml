@model KAssets.Areas.Orders.Models.AddProviderToRequestViewModel

@using (Html.BeginForm("AddProviderOffer", "ProviderOrder", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@ProviderOrderTr.AddOffers</h4>
        <hr />
        <div class="row">
            <a  class="addForm btn btn-default">@ProviderOrderTr.AddFormForItem</a>
            <a class="removeForm btn btn-default">@ProviderOrderTr.RemoveFormForItem</a>
        </div>
        <br />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.PoId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PoId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PoId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="allForms row">
        @for (int i = 0; i < (Model.Offers.Count != 0 ? Model.Offers.Count : 1); i++)
        {
        <div class="baseInfo col-md-6">


            <div class="form-group">
                @Html.LabelFor(model => model.Offers[i].Producer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Offers[i].Producer, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Offers[i].Producer, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Offers[i].Brand, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Offers[i].Brand, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Offers[i].Brand, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Offers[i].ItemModel, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Offers[i].ItemModel, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Offers[i].ItemModel, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Offers[i].Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Offers[i].Price, new { htmlAttributes = new { @class = "form-control",min=0.00001 } })
                    @Html.ValidationMessageFor(model => model.Offers[i].Price, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Offers[i].Currency, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Offers[i].SelectedCurrency, Model.Offers[i].Currency.Select(item => new SelectListItem { Value = item.Id.ToString(), Text = item.Code })

                  , new { @class = "form-control", @id = "selectOrganisation" })

                    @Html.ValidationMessageFor(model => model.Offers[i].Currency, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Offers[i].Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Offers[i].Quantity, new { htmlAttributes = new { @class = "form-control",min=1 } })
                    @Html.ValidationMessageFor(model => model.Offers[i].Quantity, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
            @Html.HiddenFor(x => x.ProviderEmail)

        }
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@Common.Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
