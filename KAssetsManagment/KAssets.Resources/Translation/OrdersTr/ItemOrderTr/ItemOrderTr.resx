<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApprovedItems" xml:space="preserve">
    <value>Approved items</value>
  </data>
  <data name="ApprovedRequestIO" xml:space="preserve">
    <value>Approved request (Item order)</value>
  </data>
  <data name="AreItemsForLocation" xml:space="preserve">
    <value>Are items for location?</value>
  </data>
  <data name="AreItemsForUser" xml:space="preserve">
    <value>Are items for user?</value>
  </data>
  <data name="AreItemsGave" xml:space="preserve">
    <value>Are items gave?</value>
  </data>
  <data name="BaseDetails" xml:space="preserve">
    <value>Base details</value>
  </data>
  <data name="ChooseItems" xml:space="preserve">
    <value>Choose items</value>
  </data>
  <data name="ChooseLocation" xml:space="preserve">
    <value>Choose location</value>
  </data>
  <data name="ChooseUser" xml:space="preserve">
    <value>Choose user</value>
  </data>
  <data name="CreateAsset" xml:space="preserve">
    <value>Create asset</value>
  </data>
  <data name="CreateAssets" xml:space="preserve">
    <value>Create assets</value>
  </data>
  <data name="DeclineRequest" xml:space="preserve">
    <value>Decline a request for items</value>
  </data>
  <data name="FinishedRequestIO" xml:space="preserve">
    <value>Finished request (Item order)</value>
  </data>
  <data name="ForLocation" xml:space="preserve">
    <value>For location</value>
  </data>
  <data name="ForSite" xml:space="preserve">
    <value>For site</value>
  </data>
  <data name="ForUser" xml:space="preserve">
    <value>For user</value>
  </data>
  <data name="GaveItems" xml:space="preserve">
    <value>Gave items</value>
  </data>
  <data name="GiveItems" xml:space="preserve">
    <value>Give items</value>
  </data>
  <data name="ItemDetails" xml:space="preserve">
    <value>Item details</value>
  </data>
  <data name="ItemsAreNotGave" xml:space="preserve">
    <value>The items are not gave!</value>
  </data>
  <data name="ItemsAreRequired" xml:space="preserve">
    <value>The field "Items"is required !</value>
  </data>
  <data name="ItemsForGiving" xml:space="preserve">
    <value>Items for giving</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="Offers" xml:space="preserve">
    <value>Offers</value>
  </data>
  <data name="PermissableError" xml:space="preserve">
    <value>The field Count value is greater than permissible.</value>
  </data>
  <data name="PleaseSelectItems" xml:space="preserve">
    <value>Please select items</value>
  </data>
  <data name="Request" xml:space="preserve">
    <value>Request</value>
  </data>
  <data name="RequestForFinishingIO" xml:space="preserve">
    <value>Request for finishing (Item order)</value>
  </data>
  <data name="RequestForItems" xml:space="preserve">
    <value>Request for items</value>
  </data>
  <data name="RequestIsNotApproved" xml:space="preserve">
    <value>The request is not approved !</value>
  </data>
  <data name="RequestsForApprovingIO" xml:space="preserve">
    <value>Requests for approving ( Item Order )</value>
  </data>
  <data name="RequestsForFinishingIO" xml:space="preserve">
    <value>Requests for finishing (Item order)</value>
  </data>
  <data name="RequestSpecialMessage" xml:space="preserve">
    <value>You will receive other items later !</value>
  </data>
  <data name="RotatingItem" xml:space="preserve">
    <value>Rotating item</value>
  </data>
  <data name="SeccessSending" xml:space="preserve">
    <value>You successfully sent the request !</value>
  </data>
  <data name="SelectedOffers" xml:space="preserve">
    <value>Selected offers</value>
  </data>
  <data name="SendOffers" xml:space="preserve">
    <value>Sent offers</value>
  </data>
  <data name="TwoAssets" xml:space="preserve">
    <value>There are two assets with same inventory numbers !</value>
  </data>
  <data name="WantItems" xml:space="preserve">
    <value>Want items</value>
  </data>
</root>